" set nocompatible              " be iMproved, required
filetype off                  " required
" set t_Co=256
" set term=screen-256color
" set ttyfast
" set lazyredraw
" set the runtime path to include Vundle and initialize.
" runtime! macros/matchit.vim
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
runtime macros/matchit.vim
" NERDTree. No explanation is needed.
Plugin 'scrooloose/nerdtree'

" *=== Ultisnips ===*
"
" Track the engine.
Plugin 'SirVer/ultisnips'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"

" Git diffs with signs
Plugin 'airblade/vim-gitgutter'

" A beautiful view of current file.
Plugin 'junegunn/goyo.vim'
noremap <leader>g :Goyo 120<CR>

" *=== ag ===*
Plugin 'rking/ag.vim'

if executable("ag")
  let g:ackprg = "ag --nogroup --column"
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
endif

noremap <leader>a :Ag

" *=== Ultisnips ===*

" Haskell plugin

" == Syntastic
Plugin 'scrooloose/syntastic'
map <Leader>s :SyntasticToggleMode<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
" == /Syntastic

" == GHC MOD
Plugin 'eagletmt/ghcmod-vim'
map <silent> tw :GhcModTypeInsert<CR>
map <silent> ts :GhcModSplitFunCase<CR>
map <silent> tq :GhcModType<CR>
map <silent> te :GhcModTypeClear<CR>
" == /GHC MOD


let $PATH = $PATH . ':' . expand('~/Library/Haskell/bin')

" Finding files with Ctrl+P.
Plugin 'ctrlpvim/ctrlp.vim'

" Git wrapper
Plugin 'tpope/vim-fugitive'

" Language pack.
" Plugin 'sheerun/vim-polyglot'
" let g:polyglot_disabled = ['elm']

" Elm support for vim
Plugin 'ElmCast/elm-vim'

" Ruby on Rails tools.
Plugin 'tpope/vim-rails'

" CoVim
Plugin 'FredKSchott/CoVim'

" Commenting lines, paragraphs or words.
Plugin 'tpope/vim-commentary'

" Hoogle inside vim
Plugin 'Twinside/vim-hoogle'

" Surrounding items with characters.
Plugin 'tpope/vim-surround'

" Enable repeating supported plugin maps with '.'
Plugin 'tpope/vim-repeat'

" Note taking with vim
Plugin 'vimwiki/vimwiki'

" Creates a text object related to indentation level.
Plugin 'michaeljsmith/vim-indent-object'

" Prettifying blocks
Plugin 'godlygeek/tabular'
let g:haskell_tabular = 1

vmap a= :Tabularize /=<CR>
vmap a; :Tabularize /::<CR>
vmap a- :Tabularize /-><CR>

" Allows using custom text objects.
Plugin 'kana/vim-textobj-user'

" Text objects for ruby.
Plugin 'rhysd/vim-textobj-ruby'

" Auto-generates vim end blocks.
Plugin 'tpope/vim-endwise'

" Allows navigating between vim panes like we do in tmux panes.
Plugin 'christoomey/vim-tmux-navigator'

" Go support in vim
Plugin 'fatih/vim-go'

" Typescript support
Plugin 'Quramy/tsuquyomi'
Plugin 'Shougo/vimproc.vim'

" Aligner. Will be used for ruby hashes
Plugin 'junegunn/vim-easy-align'

" All of your Plugins must be added before the following line.
call vundle#end()            " required

filetype plugin indent on    " required
set omnifunc=syntaxcomplete#Complete
:syntax on

" :colorscheme Tomorrow-Night
:colorscheme Hybrid

" Formatting for elm
" let g:elm_format_autosave = 1

" Highlight current line
"
" CTRL-P Options
:set cursorline
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
let g:ctrlp_show_hidden = 1

" Display Line Numbers.
:set number

" Tab Config
:set expandtab
:set tabstop=2
:set shiftwidth=2
:retab

" Exit visual mode immediately
:vmap <ESC> <C-c>

" Now, vim and mac shares the same clipboard.
if $TMUX =~ ''
  set clipboard=unnamed
endif

" Custom Mappings.
map <S-E> :NERDTreeToggle <CR>
map _ <C-Y>,i
:set relativenumber
let vim_markdown_preview_hotkey='<C-m>'
noremap gb <C-^>
nnoremap _ ^
imap <c-u> <esc>lviwU<esc>

" Tab shortcuts.
noremap tn :tabnew<Space>
noremap tw :tabclose<CR>
noremap tj :tabprev<CR>
noremap tk :tabnext<CR>
noremap th :tabfirst<CR>
noremap tl :tablast<CR>

" Vim search options.
:set incsearch
:set hlsearch

" Disabling swap files
set noswapfile

" Disabling automatic endline at the end of the file.
" set binary
set noeol

" Indent on new line
set autoindent

" Replaces word in front with the yanked word and persists yanked word in copy register.
noremap cp viwp

" When vim is resized, rebalance windows
" autocmd VimResized * :wincmd =

" Cursor shape config.
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

au FileType go nmap <leader>r <Plug>(go-run)
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1

" noremap <leader>l :GoLint<CR>
" noremap <leader>b :GoBuild<CR>
" match OverLength /\%111v.\+/
imap <C-L> <C-X><C-N>
imap <C-J> <C-N>
imap <C-K> <C-P>

" Highlights characters in the line after 80 characters
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%121v.\+/

" Macros
let @l='ilet(:Whi)f=r{A }'

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv
noremap <leader>f :NERDTreeFind<CR>

" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" In visual mode, use $ as if it's g_ because I rarely need newline character
" at the end
vmap $ g_

set timeoutlen=1000 ttimeoutlen=0

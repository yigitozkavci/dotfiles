filetype off                  " required

" Runtimepath for sourcing .vim files
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.vim/bundle/vimproc.vim
set rtp+=~/.fzf


call vundle#begin()

runtime macros/matchit.vim

" NERDTree. No explanation is needed.
Plugin 'scrooloose/nerdtree'

" --- BEGIN Ultisnips ---

Plugin 'SirVer/ultisnips'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"

" --- END Ultisnips ---

" Git diffs with signs
Plugin 'airblade/vim-gitgutter'

" A beautiful view of current file.
Plugin 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }

" --- BEGIN ag ---
Plugin 'rking/ag.vim'

if executable("ag")
  let g:ackprg = "ag --nogroup --column"
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
  let g:ctrlp_max_files = 'ag %s -l --nocolor -g ""'
endif

noremap <leader>a :Ag 

" --- END ag ---

" --- BEGIN Syntastic ---

Plugin 'scrooloose/syntastic'
map <Leader>s :SyntasticToggleMode<CR>

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 1

" --- END Syntastic ---

" --- BEGIN ghc-mod ---

" Plugin 'eagletmt/ghcmod-vim'
" map <silent> tw :GhcModTypeInsert<CR>
" map <silent> ts :GhcModSplitFunCase<CR>
" map <silent> tq :GhcModType<CR>
" map <silent> te :GhcModTypeClear<CR>

" --- END Syntastic ---

" --- BEGIN fuzzy finder ---

noremap <C-p> :FZF<CR>
let $FZF_DEFAULT_COMMAND = 'ag -g ""'

" --- END fuzzy finder ---

" Git wrapper
Plugin 'tpope/vim-fugitive'

" Ruby on Rails tools.
Plugin 'tpope/vim-rails'

" Commenting lines, paragraphs or words.
Plugin 'tpope/vim-commentary'

" Hoogle inside vim
Plugin 'Twinside/vim-hoogle'

" Surrounding items with characters.
Plugin 'tpope/vim-surround'

" Enable repeating supported plugin maps with '.'
Plugin 'tpope/vim-repeat'

" Note taking with vim
Plugin 'vimwiki/vimwiki'

" Creates a text object related to indentation level.
Plugin 'michaeljsmith/vim-indent-object'

" --- BEGIN Tabular ---

" Prettifying blocks
Plugin 'godlygeek/tabular'

let g:haskell_tabular = 1

vmap a= :Tabularize /=<CR>
vmap a; :Tabularize /::<CR>
vmap a- :Tabularize /-><CR>

" --- END Tabular ---

" Allows using custom text objects.
Plugin 'kana/vim-textobj-user'

" Text objects for ruby.
Plugin 'rhysd/vim-textobj-ruby'

" Auto-generates vim end blocks.
Plugin 'tpope/vim-endwise'

" Allows navigating between vim panes like we do in tmux panes.
Plugin 'christoomey/vim-tmux-navigator'

" Aligner. Will be used for ruby hashes
Plugin 'junegunn/vim-easy-align'

" Formatter with support of many filetypes
Plugin 'sbdchd/neoformat'

" Haskell syntax highlighter
Plugin 'neovimhaskell/haskell-vim'
let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`
let g:haskell_backpack = 1                " to enable highlighting of backpack keywords

" All of your Plugins must be added before the following line.
call vundle#end()            " required

" Standard Config
filetype plugin indent on    " required
set omnifunc=syntaxcomplete#Complete
syntax on
set background=dark
colorscheme solarized8_flat
set number
set relativenumber
set nofoldenable " Disable all kind of folds
set laststatus=2 " Always display status bar

" Tab Config
set expandtab
set tabstop=2
set shiftwidth=2
retab

" CTRL-P Options
set cursorline
let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'
let g:ctrlp_show_hidden = 1

" Exit visual mode immediately
vmap <ESC> <C-c>

" Tab shortcuts.
noremap tn :tabnew<Space>
noremap tw :tabclose<CR>
noremap tj :tabprev<CR>
noremap tk :tabnext<CR>
noremap th :tabfirst<CR>
noremap tl :tablast<CR>
noremap <leader>1 1gt
noremap <leader>2 2gt
noremap <leader>3 3gt
noremap <leader>4 4gt
noremap <leader>5 5gt
noremap <leader>6 6gt

" Vim search options.
set incsearch
set hlsearch

" Disabling swap files
set noswapfile

" Disabling automatic endline at the end of the file.
" set binary
set noeol

" Indent on new line
" set autoindent

" Replaces word in front with the yanked word and persists yanked word in copy register.
noremap cp viwp

" When vim is resized, rebalance windows
autocmd VimResized * :wincmd =

" Cursor shape config.
if exists('$TMUX')
  let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\"
  let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\"
else
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"
endif

" Autocompletion config
imap <C-L> <C-X><C-N>
imap <C-J> <C-N>
imap <C-K> <C-P>

" Highlights characters in the line after 80 characters
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%121v.\+/

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Move the selected visual block up and down
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" Pretty self-explanatory
noremap <leader>f :NERDTreeFind<CR>

" In visual mode, use $ as if it's g_ because I rarely need newline character
" at the end
vmap $ g_

" Now, vim and mac shares the same clipboard.
" To make this stuff work, check:
" - You have done `brew install reattach-to-user-namespace`
" - if you have clipboard access with `vim --version`.
set clipboard=unnamed

" Custom Mappings.
map <S-E> :NERDTreeToggle <CR>
map _ <C-Y>,i
noremap gb <C-^>
nnoremap _ ^
imap <c-u> <esc>lviwU<esc>

nnoremap <leader>ev :vsplit $MYVIMRC<cr>G
nnoremap <leader>sv :w<cr>:source $MYVIMRC<cr>:q<cr>

inoremap jk <esc>
inoremap <esc> <nop>
inoremap C-[ <nop>

augroup mdwn
  autocmd FileType markdown onoremap ih :<c-u>execute "normal! ?^==\\+$\r:noh\rkvg_"<cr>
augroup END

set statusline=File:\ %f

nnoremap g; vi}:Tabularize /::<CR>

augroup fmt
  autocmd!
  autocmd BufWritePre * undojoin | Neoformat! haskell brittany
augroup END

function! TogglePaste()
  if &paste
    set nopaste
  else
    set paste
  endif
endfunction!

nnoremap <leader>p :call TogglePaste()<CR>
